---
# Copyright (c) Ansible Project
# GNU General Public License v3.0+ (see LICENSES/GPL-3.0-or-later.txt or https://www.gnu.org/licenses/gpl-3.0.txt)
# SPDX-License-Identifier: GPL-3.0-or-later

- set_fact:
    test_basedir: "/tmp/terraform_output"

- name: Clean the test directory
  ansible.builtin.file: &clean-test-directory
    path: "{{ test_basedir }}"
    state: absent

- name: Create terraform project directory
  ansible.builtin.file:
    path: "{{ test_basedir }}"
    state: directory
    mode: 0755

- name: Copy terraform files to work space
  ansible.builtin.copy:
    src: "{{ item }}"
    dest: "{{ test_basedir }}/{{ item }}"
  loop:
    - write_file.tf

- &stat
  name: Run stat on the result file
  stat:
    path: "{{ test_basedir }}/terraform_test.txt"
  register: stat
- name: The test file must not exist
  assert:
    that: not stat.stat.exists

- name: Run Terraform module
  cloud.terraform.terraform:
    project_path: "{{ test_basedir }}"
    state: present
    force_init: true
  register: terraform_result
  check_mode: false
- assert:
    that:
      - terraform_result is changed
- *stat
- name: The test file must exist
  assert:
    that: stat.stat.exists

- name: Terraform checkout - default state file
  cloud.terraform.terraform_output:
    project_path: "{{ test_basedir }}"
  register: terraform_output
- assert:
    that:
      - terraform_output is not changed
      - terraform_output.outputs.my_output.sensitive == false
      - terraform_output.outputs.my_output.type == "string"
      - terraform_output.outputs.my_output.value == "file generated"

- name: Terraform checkout - list only selected output in json format
  cloud.terraform.terraform_output:
    project_path: "{{ test_basedir }}"
    name: my_output
    format: json
  register: terraform_output
- assert:
    that:
      - terraform_output is not changed
      - terraform_output.outputs == "file generated"

- name: Terraform checkout - list only selected output in raw format
  cloud.terraform.terraform_output:
    project_path: "{{ test_basedir }}"
    format: raw
    name: my_output
  register: terraform_output
- assert:
    that:
      - terraform_output is not changed
      - terraform_output.outputs == "file generated"

# - name: Copy terraform state file
#   ansible.builtin.copy:
#     src: "{{ test_basedir }}/terraform.tfstate"
#     remote_src: yes
#     dest: "{{ test_basedir }}/coppied_terraform.tfstate"
#   register: my_dest

# - name: Terraform checkout - specified state file
#   cloud.terraform.terraform_output:
#     state_file: "{{ my_dest.dest }}"
#   register: terraform_output
# - assert:
#     that:
#       - terraform_output is not changed
#       - terraform_output.outputs.my_output.sensitive == false
#       - terraform_output.outputs.my_output.type == "string"
#       - terraform_output.outputs.my_output.value == "file generated"

- name: Delete results
  cloud.terraform.terraform:
    project_path: "{{ test_basedir }}"
    state: absent
  register: terraform_result
  check_mode: false
- assert:
    that:
      - terraform_result is changed
- *stat
- name: The test file must not exist
  assert:
    that: not stat.stat.exists
